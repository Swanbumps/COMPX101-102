using System;
using System.Drawing;
using System.Drawing.Drawing2D;

namespace Compx102H
{
  /// <summary>
  /// <para>A graphical object representing a wind turbine.</para>
  /// <para>Wind turbines consist of a a rectangular pole and a rotor,
  /// which sits at the top of the pole and has a configurable number
  /// of rotor blades.</para>
  /// <para>The wind turbine's size is determined by the height of the
  /// pole and the radius of the rotor, which is equal to the length
  /// of its blades.</para>
  /// <para>Its centre position is considered to be at the
  /// top of the pole, which is the centre of the rotor.</para>
  /// <para>It is also possible to configure the color of the pole and
  /// rotor. The rotor can be drawn at different angles to produce the
  /// illusion that it rotates.</para>
  /// <para>Finally, a wind turbine is associated with a capacity to 
  /// determine the amount of electricity it generates.</para>
  /// <para>Written by Robi Malik, 2020-2021.</para>
  /// </summary>
  public class WindTurbine
  {
    //####################################################################
    //# Instance Variables
    /// <summary>
    /// The height of the wind turbine's pole.
    /// The pole height represents the distance between the base of the
    /// pole and the centre of the rotor, and is measured in pixels.
    /// </summary>
    private int _poleHeight;
    /// <summary>
    /// The radius of the wind turbine's rotor.
    /// The rotor radius represents the length of the rotor blades.
    /// This is given as a percentage of the pole height.
    /// A value of 1.0 would mean that the blades just touch the ground,
    /// so reasonable values are strictly between 0.0 and 1.0.
    /// </summary>
    private float _rotorRadius;
    /// <summary>
    /// The number of rotor blades of the wind turbine.
    /// </summary>
    private int _numberOfBlades;
    /// <summary>
    /// A flag to indicate whether the rotor turns in clockwise (true)
    /// or counter-clockwise (false) direction.
    /// </summary>
    private bool _clockwise;
    /// <summary>
    /// The brush that defines the colour of the pole.
    /// </summary>
    private SolidBrush _poleBrush;
    /// <summary>
    /// The brush that defines the colour of the rotor.
    /// </summary>
    private SolidBrush _rotorBrush;
    /// <summary>
    /// The nameplate capacity of the wind turbine's generator.
    /// The nameplate capacity defines the maximum power that can be
    /// generated by the turbine, and is measured in megawatts (MW).
    /// </summary>
    private decimal _capacity;
 
    /// <summary>
    /// The x coordinate of centre of the rotor.
    /// </summary>
    private float _centreX;
    /// <summary>
    /// The y coordinate of centre of the rotor.
    /// </summary>
    private float _centreY;
    /// <summary>
    /// The angular position of the first rotor blade when drawing.
    /// The rotor is animated to turn continuously by changing this number periodically.
    /// </summary>
    private float _rotation;


    //####################################################################
    //# Constants
    /// <summary>
    /// The ratio between the width of the pole and its height,
    /// and between the width of the rotor blades and their length.
    /// </summary>
    private const float WIDTH_TO_HEIGHT_RATIO = 0.1f;


    //####################################################################
    //# Constructor
    /// <summary>
    /// Creates a new wind turbine by specifying all attributes.
    /// </summary>
    public WindTurbine(int poleHeight, float rotorRadius, int numberOfBlades,
                       bool clockwise, Color poleColor, Color rotorColor,
                       decimal capacity, int centreX, int centreY)
    {
      PoleHeight = poleHeight;
      RotorRadius = rotorRadius;
      NumberOfBlades = numberOfBlades;
      Clockwise = clockwise;
      _poleBrush = new SolidBrush(poleColor);
      _rotorBrush = new SolidBrush(rotorColor);
      Capacity = capacity;
      _centreX = centreX;
      _centreY = centreY;
    }


    //####################################################################
    //# Public Methods
    /// <summary>
    /// Draws this wind turbine on the given graphics context.
    /// </summary>
    public void Draw(Graphics paper)
    {
      // First draw the pole
      float poleWidth = WIDTH_TO_HEIGHT_RATIO * _poleHeight;
      float halfPoleWidth = 0.5f * poleWidth;
      float x0 = _centreX - halfPoleWidth;
      paper.FillRectangle(_poleBrush, x0, _centreY, poleWidth, _poleHeight);

      // Next, draw a circle to mark the centre of the rotor
      float y0 = _centreY - halfPoleWidth;
      paper.FillEllipse(_rotorBrush, x0, y0, poleWidth, poleWidth);

      // Finally, draw the rotor blades
      PointF centre = new PointF(_centreX, _centreY);
      float bladeLength = _rotorRadius * _poleHeight;
      PointF[] bladePolygon = new PointF[] {
        centre,
        new PointF(_centreX + 0.5f * bladeLength, _centreY - halfPoleWidth),
        new PointF(_centreX + bladeLength, _centreY),
        new PointF(_centreX + 0.5f * bladeLength, _centreY + halfPoleWidth)
      };
      Matrix matrix = new Matrix();
      matrix.RotateAt(_rotation, centre);
      float angle = 360.0f / _numberOfBlades;
      for (int i = 0; i < _numberOfBlades; i++) {
        paper.Transform = matrix;
        paper.FillPolygon(_rotorBrush, bladePolygon);
        matrix.RotateAt(angle, centre);
      }
      paper.ResetTransform();
    }

    /// <summary>
    /// Determines whether a point is within the pole of this wind turbine.
    /// </summary>
    /// <param name="x">The x coordinate of the point to be tested.</param>
    /// <param name="y">The y coordinate of the point to be tested.</param>
    /// <returns>true if the point is within the wind turbine's pole, false otherwise.</returns>
    public bool IsPoleClicked(int x, int y)
    {
      float halfPoleWidth = 0.5f * WIDTH_TO_HEIGHT_RATIO * _poleHeight;
      return y >= _centreY - halfPoleWidth && y <= _centreY + _poleHeight &&
             x >= _centreX - halfPoleWidth && x <= _centreX + halfPoleWidth;
    }

    /// <summary>
    /// Rotates the rotor of this wind turbine by the given amount.
    /// The rotation may be clockwise or counter-clockwise depending on
    /// the instance variable _clockwise.
    /// </summary>
    /// <param name="angle">The angle by which to rotate, in degrees.</param>
    public void Rotate(float angle)
    {
      // Rotate by the given angle, direction depending on _clockwise state.
      // This is done by changing the _rotation instance variable, which changes
      // how the rotor is displayed in the Draw() method.
      if (_clockwise) {
        _rotation += angle;
      } else {
        _rotation -= angle;
      }
      // Reset to an angle between 0 and 360 degrees (using modulo operator).
      _rotation %= 360.0f;
    }


    //####################################################################
    //# Properties
    /// <summary>
    /// The height of the wind turbine's pole.
    /// The pole height represents the distance between the base of the
    /// pole and the centre of the rotor, and is measured in pixels.
    /// </summary>
    public int PoleHeight
    {
      get { return _poleHeight; }
      set {
        if (value > 0) {
          _poleHeight = value;
        } else {
          throw new ArgumentOutOfRangeException
            ("The value " + value + " is out of range for a wind generator's pole height. " +
             "Only integers greater than 0 are allowed.");
        }
      }
    }

    /// <summary>
    /// The radius of the wind turbine's rotor.
    /// The rotor radius represents the length of the rotor blases.
    /// This is given as a percentage of the pole height.
    /// A value of 1.0 would mean that the blades just touch the ground,
    /// so reasonable values are strictly between 0.0 and 1.0.
    /// </summary>
    public float RotorRadius
    {
      get { return _rotorRadius; }
      set {
        if (value >= 0.0 && value <= 1.0) {
          _rotorRadius = value;
        } else {
          throw new ArgumentOutOfRangeException
            ("The value " + value + " is out of range for a wind turbine's rotor radius. " +
             "Only floating-point numbers between 0 and 1 are allowed. " +
             "Please note that the trackbars produce integers between 0 and 100, which must be scaled. " +
             "The easiest way to do this is to multiply the value from the trackbar with 0.01f.");
        }
      }
    }

    /// <summary>
    /// The number of rotor blades of the wind turbine.
    /// </summary>
    public int NumberOfBlades
    {
      get { return _numberOfBlades; }
      set {
        if (value > 0) {
          _numberOfBlades = value;
        } else {
          throw new ArgumentOutOfRangeException
            ("The value " + value + " is out of range for a wind turbine's number of rotor blades. " +
             "Only integers greater than 0 are allowed.");
        }
      }
    }

    /// <summary>
    /// A flag to indicate whether the rotor turns in clockwise (true)
    /// or counter-clockwise (false) direction.
    /// </summary>
    public bool Clockwise
    {
      get { return _clockwise; }
      set { _clockwise = value; }
    }

    /// <summary>
    /// The colour of the wind turbine's pole.
    public Color PoleColor
    {
      get { return _poleBrush.Color; }
      set { _poleBrush.Color = value; }
    }

    /// <summary>
    /// The colour of the wind turbine's rotor.
    public Color RotorColor
    {
      get { return _rotorBrush.Color; }
      set { _rotorBrush.Color = value; }
    }

    /// <summary>
    /// The nameplate capacity of the wind turbine's generator.
    /// The nameplate capacity defines the maximum power that can be
    /// generated by the turbine, and is measured in megawatts (MW).
    /// </summary>
    public decimal Capacity
    {
      get { return _capacity; }
      set {
        if (value >= 0.0m) {
          _capacity = value;
        } else {
          throw new ArgumentOutOfRangeException
            ("The value " + value + " is out of range for a wind turbine's capacity. " +
             "Only non-negative values are allowed.");
        }
      }
    }

    /// <summary>
    /// The x coordinate of centre of the wind turbine's rotor.
    /// </summary>
    public float CentreX
    {
      get { return _centreX; }
      set { _centreX = value; }
    }

    /// <summary>
    /// The y coordinate of centre of the wind turbine's rotor.
    /// </summary>
    public float CentreY
    {
      get { return _centreY; }
      set { _centreY = value; }
    }

  }

}
